        -:    0:Source:/Users/bytedance/CLionProjects/C-projcet/code/Vector.hpp
        -:    0:Graph:/Users/bytedance/CLionProjects/C-projcet/cmake-build-debug/CMakeFiles/cppProject.dir/code/main.cpp.gcno
        -:    0:Data:/Users/bytedance/CLionProjects/C-projcet/cmake-build-debug/CMakeFiles/cppProject.dir/code/main.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:#ifndef CPPPROJECT_VECTOR_HPP
        -:    3:#define CPPPROJECT_VECTOR_HPP
        -:    4:
        -:    5:#include "Matrix.hpp"
        -:    6:#include <vector>
        -:    7:#include <iostream>
        -:    8:
        -:    9:using namespace std;
        -:   10:
        -:   11:template<class T>
        -:   12:class Matrix;
        -:   13:
        -:   14:/**
        -:   15: * The class of vector
        -:   16: * @tparam T the type of the element of vector
        -:   17: */
        -:   18:
        -:   19:template<class T>
        -:   20:class Vector {
        -:   21:public:
        -:   22:    /**
        -:   23:     * init a vector with length equals 0
        -:   24:     */
        -:   25:    Vector() {
        -:   26:        this->length = 0;
        -:   27:        this->vector.resize(length);
        -:   28:    }
        -:   29:
        -:   30:    /**
        -:   31:     * init a vector by a std::vector
        -:   32:     * @param other the std::vector
        -:   33:     */
        4:   34:    Vector<T>(vector<T> other) {
        2:   34-block  0
        2:   34-block  1
        2:   35:        this->length = other.size();
        2:   36:        this->vector = other;
        2:   36-block  0
        4:   37:    }
        2:   37-block  0
        2:   37-block  1
    $$$$$:   37-block  2
    $$$$$:   37-block  3
        -:   38:
        -:   39:/**
        -:   40: * init a vector length equals user input and all elements equal default value
        -:   41: * @param length  the length of the vector
        -:   42: */
        2:   43:    explicit Vector(int length) {
        1:   43-block  0
        1:   43-block  1
        1:   44:        this->length = length;
        1:   45:        this->vector.resize(length);
        1:   45-block  0
        2:   46:    }
        1:   46-block  0
        1:   46-block  1
    $$$$$:   46-block  2
    $$$$$:   46-block  3
        -:   47:
        -:   48:/**
        -:   49: * get the length of the vector
        -:   50: * @return the length of the vector
        -:   51: */
        -:   52:    int getLength() {
        -:   53:        return this->length;
        -:   54:    }
        -:   55:
        -:   56:/**
        -:   57: * show the vector
        -:   58: */
        -:   59:    void show() {
        -:   60:        cout << "Length:" << this->length << endl;
        -:   61:        cout << "[";
        -:   62:        for (int i = 0; i < this->length; ++i) {
        -:   63:            cout << this->vector[i];
        -:   64:            if (i == this->length - 1) {
        -:   65:                cout << "]";
        -:   66:            } else {
        -:   67:                cout << ",";
        -:   68:            }
        -:   69:        }
        -:   70:    }
        -:   71:
        -:   72:/**
        -:   73: * overload [] to achieve the element of the vector
        -:   74: * @param i the index of the vector
        -:   75: * @return the i-th element of the vector
        -:   76: */
        4:   77:    T &operator[](int i) {
        4:   77-block  0
        4:   78:        return this->vector[i];
        4:   78-block  0
        -:   79:    }
        -:   80:
        -:   81:/**
        -:   82: * get the minimum element of the vector
        -:   83: * @return the minimum element of the vector
        -:   84: */
        -:   85:    double findMin() {
        -:   86:        if (this->length == 0) {
        -:   87:            cerr << "The vector is empty,can not get sum" << endl;
        -:   88:            return 0;
        -:   89:        }
        -:   90:        double ans = this->vector[0].real();
        -:   91:        for (int i = 0; i < length; ++i) {
        -:   92:            ans = min(ans, this->vector[i].real());
        -:   93:        }
        -:   94:        return ans;
        -:   95:    }
        -:   96:
        -:   97:/**
        -:   98: * get the maximum element of the vector
        -:   99: * @return the maximum element of the vector
        -:  100: */
        -:  101:    double findMax() {
        -:  102:        if (this->length == 0) {
        -:  103:            cerr << "The vector is empty,can not get sum" << endl;
        -:  104:            return 0;
        -:  105:        }
        -:  106:        double ans = this->vector[0].real();
        -:  107:        for (int i = 0; i < length; ++i) {
        -:  108:            ans = max(ans, this->vector[i].real());
        -:  109:        }
        -:  110:        return ans;
        -:  111:    }
        -:  112:
        -:  113:/**
        -:  114: * get the average of the all elements of the vector
        -:  115: * @return  the average of the all elements of the vector
        -:  116: */
        -:  117:    T findAverage() {
        -:  118:        T ans = findSum();
        -:  119:        ans /= this->length;
        -:  120:        return ans;
        -:  121:    }
        -:  122:
        -:  123:/**
        -:  124: *get the sum of the all elements of the vector
        -:  125: * @return  the sum of the all elements of the vector
        -:  126: */
        -:  127:    T findSum() {
        -:  128:        if (this->length == 0) {
        -:  129:            cerr << "The Vector is empty,can not get sum" << endl;
        -:  130:            return {0, 0};
        -:  131:        }
        -:  132:        T ans = {0, 0};
        -:  133:        for (int i = 0; i < this->length; ++i) {
        -:  134:            ans += this->vector[i];
        -:  135:        }
        -:  136:        return ans;
        -:  137:    }
        -:  138:
        -:  139:/**
        -:  140: * set the length of the vector
        -:  141: * @param _length the new length of the vector, if the size is larger,the new element is default value.
        -:  142: */
        -:  143:    void setLength(int _length) {
        -:  144:        this->length = _length;
        -:  145:        this->vector.resize(_length);
        -:  146:    }
        -:  147:
        -:  148:/**
        -:  149: * vector dot product with other vector
        -:  150: * @param other the other vector
        -:  151: * @return the answer
        -:  152: */
        -:  153:    T dot_product(Vector other) {
        -:  154:        T ans = 0;
        -:  155:        if (this->length != other.length) {
        -:  156:            cerr << "dot product error!" << endl;
        -:  157:            cerr << "the two vector length is not equal" << endl;
        -:  158:            return ans;
        -:  159:        }
        -:  160:        for (int i = 0; i < this->length; ++i) {
        -:  161:            ans += this->vector[i] * other.vector[i];
        -:  162:        }
        -:  163:        return ans;
        -:  164:    }
        -:  165:
        -:  166:/**
        -:  167: * get the conjugation of the vector
        -:  168: * @return the conjugation of the vector
        -:  169: */
        -:  170:    Vector conjugation() {
        -:  171:        Vector ans = Vector(this->length);
        -:  172:        for (int i = 0; i < this->length; ++i) {
        -:  173:            T cur(this->vector[i].real(), -this->vector[i].imag());
        -:  174:            ans[i] = cur;
        -:  175:        }
        -:  176:        return ans;
        -:  177:    }
        -:  178:
        -:  179:/**
        -:  180: * get the conjugation of the vector, and change this vector to ans
        -:  181: * @return the conjugation of the vector
        -:  182: */
        -:  183:    Vector conjugation_change() {
        -:  184:        Vector ans = Vector(this->length);
        -:  185:        for (int i = 0; i < this->length; ++i) {
        -:  186:            T cur(this->vector[i].real(), -this->vector[i].imag());
        -:  187:            ans[i] = cur;
        -:  188:        }
        -:  189:        this->vector = ans.vector;
        -:  190:        return ans;
        -:  191:    }
        -:  192:
        -:  193:/**
        -:  194: * get the element wise multiplication of the vector
        -:  195: * @param other  the other vector to element wise multiplication
        -:  196: * @return the answer vector
        -:  197: */
        -:  198:    Vector element_wise_multiplication(Vector &other) {
        -:  199:        if (this->length != other.length) {
        -:  200:            cerr << "element_wise_multiplication_change error!" << endl;
        -:  201:            cerr << "the size of two vector is not equal" << endl;
        -:  202:            return Vector(0);
        -:  203:        }
        -:  204:        Vector ans = Vector(this->length);
        -:  205:        for (int i = 0; i < this->length; ++i) {
        -:  206:            ans[i] = this->vector[i] * other.vector[i];
        -:  207:        }
        -:  208:        return ans;
        -:  209:    }
        -:  210:
        -:  211:/**
        -:  212: * get the element wise multiplication of the vector, and change this vector to answer vector
        -:  213: * @param other  the other vector to element wise multiplication
        -:  214: * @return the answer vector
        -:  215: */
        -:  216:    Vector element_wise_multiplication_change(Vector &other) {
        -:  217:        if (this->length != other.length) {
        -:  218:            cerr << "element_wise_multiplication_change error!" << endl;
        -:  219:            cerr << "the size of two vector is not equal" << endl;
        -:  220:            return Vector(0);
        -:  221:        }
        -:  222:        Vector ans = Vector(this->length);
        -:  223:        for (int i = 0; i < this->length; ++i) {
        -:  224:            ans[i] = this->vector[i] * other.vector[i];
        -:  225:        }
        -:  226:        this->vector = ans.vector;
        -:  227:        return ans;
        -:  228:    }
        -:  229:
        -:  230:/**
        -:  231: * reload operator + to add two vector
        -:  232: * @param other  the other vector to add
        -:  233: * @return the answer vector
        -:  234: */
        -:  235:    Vector operator+(const Vector &other) const {
        -:  236:        if (this->length != other.length) {
        -:  237:            cerr << "The length of two vector is not equal" << endl;
        -:  238:            return Vector(0);
        -:  239:        }
        -:  240:        Vector ans = Vector(this->length);
        -:  241:        for (int i = 0; i < this->length; ++i) {
        -:  242:            ans[i] = this->vector[i] + other.vector[i];
        -:  243:        }
        -:  244:        return ans;
        -:  245:    }
        -:  246:
        -:  247:/**
        -:  248: * reload operator + to add with a matrix,every row of matrix will add the vector
        -:  249: * @param other the matrix to add
        -:  250: * @return the answer matrix
        -:  251: */
        -:  252:    Matrix<T> operator+(Matrix<T> other) const {
        -:  253:        if (this->length != other.getColumn()) {
        -:  254:            cerr << "The column of the matrix is not equal to the vector length" << endl;
        -:  255:            return Matrix<T>(0, 0);
        -:  256:        }
        -:  257:        Matrix<T> ans = Matrix<T>(other.getRow(), other.getColumn());
        -:  258:        for (int i = 0; i < other.getRow(); ++i) {
        -:  259:            for (int j = 0; j < other.getColumn(); ++j) {
        -:  260:                ans[i][j] = other[i][j] + this->vector[j];
        -:  261:            }
        -:  262:        }
        -:  263:        return ans;
        -:  264:    }
        -:  265:
        -:  266:/**
        -:  267: * reload operator - to add two vector
        -:  268: * @param other  the other vector to minus
        -:  269: * @return the answer vector
        -:  270: */
        -:  271:    Vector operator-(const Vector &other) const {
        -:  272:        if (this->length != other.length) {
        -:  273:            cerr << "The length of two vector is not equal" << endl;
        -:  274:            return Vector(0);
        -:  275:        }
        -:  276:        Vector ans = Vector(this->length);
        -:  277:        for (int i = 0; i < this->length; ++i) {
        -:  278:            ans[i] = this->vector[i] - other.vector[i];
        -:  279:        }
        -:  280:        return ans;
        -:  281:    }
        -:  282:
        -:  283:/**
        -:  284: * reload operator - to add with a matrix,every row of matrix will minus the vector
        -:  285: * @param other the matrix to minus
        -:  286: * @return the answer matrix
        -:  287: */
        -:  288:    Matrix<T> operator-(Matrix<T> other) const {
        -:  289:        if (this->length != other.getColumn()) {
        -:  290:            cerr << "The column of the matrix is not equal to the vector length" << endl;
        -:  291:            return Matrix<T>(0, 0);
        -:  292:        }
        -:  293:        Matrix<T> ans = Matrix<T>(other.getRow(), other.getColumn());
        -:  294:        for (int i = 0; i < other.getRow(); ++i) {
        -:  295:            for (int j = 0; j < other.getColumn(); ++j) {
        -:  296:                ans[i][j] = other[i][j] - this->vector[j];
        -:  297:            }
        -:  298:        }
        -:  299:        return ans;
        -:  300:    }
        -:  301:
        -:  302:/**
        -:  303: * reload operator * to multiple with an element
        -:  304: * @param other the multiplier
        -:  305: * @return the answer vector
        -:  306: */
        -:  307:    Vector operator*(T other) const {
        -:  308:        Vector ans = Vector(this->length);
        -:  309:        for (int i = 0; i < this->length; ++i) {
        -:  310:            ans[i] = this->vector[i] * other;
        -:  311:        }
        -:  312:        return ans;
        -:  313:    }
        -:  314:
        -:  315:/**
        -:  316: * reload operator * to multiple with a matrix,every row of the matrix will multiple with the vector
        -:  317: * @param other the multiplier matrix
        -:  318: * @return the answer vector
        -:  319: */
        -:  320:    Vector operator*(Matrix<T> other) const {
        -:  321:        if (this->length != other.getRow()) {
        -:  322:            cerr << "Vector * Matrix error!" << endl;
        -:  323:            cerr << "Vector length is not equal Matrix row" << endl;
        -:  324:            return Vector(0);
        -:  325:        }
        -:  326:        Vector ans = Vector(other.getColumn());
        -:  327:        for (int i = 0; i < other.getColumn(); ++i) {
        -:  328:            for (int j = 0; j < this->length; ++j) {
        -:  329:                ans[i] += this->vector[j] * other[j][i];
        -:  330:            }
        -:  331:        }
        -:  332:        return ans;
        -:  333:    }
        -:  334:
        -:  335:/**
        -:  336: * get the cross product of two vectors
        -:  337: * @param other the other vector to cross product
        -:  338: * @return the answer vector
        -:  339: */
        1:  340:    Vector cross_product(Vector other) {
        1:  340-block  0
        1:  341:        Vector ans = Vector(3);
        1:  342:        if (this->length == 2 && other.length == 2) {
        1:  342-block  0
        1:  342-block  1
        1:  343:            ans[2] = this->vector[0] * other.vector[1] - this->vector[1] * other.vector[0];
        1:  343-block  0
        1:  344:            return ans;
        1:  344-block  0
        -:  345:        }
    #####:  346:        if (this->length == 3 && other.length == 3) {
    $$$$$:  346-block  0
    $$$$$:  346-block  1
    #####:  347:            ans[0] = this->vector[1] * other.vector[2] - this->vector[2] * other.vector[1];
    $$$$$:  347-block  0
    #####:  348:            ans[1] = this->vector[2] * other.vector[0] - this->vector[0] * other.vector[2];
    $$$$$:  348-block  0
    #####:  349:            ans[2] = this->vector[0] * other.vector[1] - this->vector[1] * other.vector[0];
    $$$$$:  349-block  0
    #####:  350:            return ans;
    $$$$$:  350-block  0
        -:  351:        }
    #####:  352:        cerr << "The dimension of both vectors should either be 2 or 3" << endl;
    $$$$$:  352-block  0
    $$$$$:  352-block  1
    #####:  353:        return Vector(0);
    $$$$$:  353-block  0
    $$$$$:  353-block  1
        1:  354:    }
    $$$$$:  354-block  0
        1:  354-block  1
    $$$$$:  354-block  2
        -:  355:
        -:  356:private:
        -:  357:    vector<T> vector;
        3:  358:    int length{};
        -:  359:};
        -:  360:
        -:  361:#endif //CPPPROJECT_VECTOR_HPP
